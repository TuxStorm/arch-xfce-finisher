#!/bin/bash
#-------------------------------------------------------------------------------
#Created by helmuthdu mailto: helmuthdu[at]gmail[dot]com
#Contribution: flexiondotorg
#-------------------------------------------------------------------------------
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------
# Run this script after your first boot with archlinux (as root)

if [[ -f `pwd`/sharedfuncs ]]; then
  source sharedfuncs
else
  echo "missing file: sharedfuncs"
  exit 1
fi

#ARCHLINUX ULTIMATE INSTALL {{{
#WELCOME {{{
welcome(){
  clear
  echo -e "${Bold}Welcome to the Archlinux Ultimate install script by helmuthdu${White}"
  print_line
  echo "Requirements:"
  echo "-> Archlinux installation"
  echo "-> Run script as root user"
  echo "-> Working internet connection"
  print_line
  echo "Script can be cancelled at any time with CTRL+C"
  print_line
  echo "http://www.github.com/helmuthdu/aui"
  print_line
  echo -e "\nBackups:"
  print_line
  # backup old configs
  [[ ! -f /etc/pacman.conf.aui ]] && cp -v /etc/pacman.conf /etc/pacman.conf.aui || echo "/etc/pacman.conf.aui";
  [[ -f /etc/ssh/sshd_config.aui ]] && echo "/etc/ssh/sshd_conf.aui";
  [[ -f /etc/sudoers.aui ]] && echo "/etc/sudoers.aui";
  pause_function
  echo ""
}
#}}}
#LOCALE SELECTOR {{{
language_selector(){
  #AUTOMATICALLY DETECTS THE SYSTEM LOCALE {{{
  #automatically detects the system language based on your locale
  LOCALE=`locale | grep LANG | sed 's/LANG=//' | cut -c1-5`
  #KDE #{{{
  if [[ $LOCALE == pt_BR || $LOCALE == en_GB || $LOCALE == zh_CN ]]; then
    LOCALE_KDE=`echo $LOCALE | tr '[:upper:]' '[:lower:]'`
  elif [[ $LOCALE == en_US ]]; then
    LOCALE_KDE="en_gb"
  else
    LOCALE_KDE=`echo $LOCALE | cut -d\_ -f1`
  fi
  #}}}
  #FIREFOX #{{{
  if [[ $LOCALE == pt_BR || $LOCALE == pt_PT || $LOCALE == en_GB || $LOCALE == en_US || $LOCALE == es_AR || $LOCALE == es_CL || $LOCALE == es_ES || $LOCALE == zh_CN ]]; then
    LOCALE_FF=`echo $LOCALE | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
  else
    LOCALE_FF=`echo $LOCALE | cut -d\_ -f1`
  fi
  #}}}
  #THUNDERBIRD #{{{
  if [[ $LOCALE == pt_BR || $LOCALE == pt_PT || $LOCALE == en_US || $LOCALE == en_GB || $LOCALE == es_AR || $LOCALE == es_ES || $LOCALE == zh_CN ]]; then
    LOCALE_TB=`echo $LOCALE | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
  elif [[ $LOCALE == es_CL ]]; then
    LOCALE_TB="es-es"
  else
    LOCALE_TB=`echo $LOCALE | cut -d\_ -f1`
  fi
  #}}}
  #HUNSPELL #{{{
  if [[ $LOCALE == pt_BR ]]; then
    LOCALE_HS=`echo $LOCALE | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
  elif [[ $LOCALE == pt_PT ]]; then
    LOCALE_HS="pt_pt"
  else
    LOCALE_HS=`echo $LOCALE | cut -d\_ -f1`
  fi
  #}}}
  #ASPELL #{{{
  LOCALE_AS=`echo $LOCALE | cut -d\_ -f1`
  #}}}
  #LIBREOFFICE #{{{
  if [[ $LOCALE == pt_BR || $LOCALE == en_GB || $LOCALE == en_US || $LOCALE == zh_CN ]]; then
    LOCALE_LO=`echo $LOCALE | sed 's/_/-/'`
  else
    LOCALE_LO=`echo $LOCALE | cut -d\_ -f1`
  fi
  #}}}
  #}}}
  print_title "LOCALE - https://wiki.archlinux.org/index.php/Locale"
  print_info "Locales are used in Linux to define which language the user uses. As the locales define the character sets being used as well, setting up the correct locale is especially important if the language contains non-ASCII characters."
  read -p "Default system language: \"$LOCALE\" [Y/n]: " OPTION
  case "$OPTION" in
    "n")
      while [[ $OPTION != y ]]; do
        setlocale
        read_input_text "Confirm locale ($LOCALE)"
      done
      sed -i '/'${LOCALE}'/s/^#//' /etc/locale.gen
      locale-gen
      localectl set-locale LANG=${LOCALE_UTF8}
      #KDE #{{{
      if [[ $LOCALE == pt_BR || $LOCALE == en_GB || $LOCALE == zh_CN ]]; then
        LOCALE_KDE=`echo $LOCALE | tr '[:upper:]' '[:lower:]'`
      elif [[ $LOCALE == en_US ]]; then
        LOCALE_KDE="en_gb"
      else
        LOCALE_KDE=`echo $LOCALE | cut -d\_ -f1`
      fi
      #}}}
      #FIREFOX #{{{
      if [[ $LOCALE == pt_BR || $LOCALE == pt_PT || $LOCALE == en_GB || $LOCALE == en_US || $LOCALE == es_AR || $LOCALE == es_CL || $LOCALE == es_ES || $LOCALE == zh_CN ]]; then
        LOCALE_FF=`echo $LOCALE | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
      else
        LOCALE_FF=`echo $LOCALE | cut -d\_ -f1`
      fi
      #}}}
      #THUNDERBIRD #{{{
      if [[ $LOCALE == pt_BR || $LOCALE == pt_PT || $LOCALE == en_US || $LOCALE == en_GB || $LOCALE == es_AR || $LOCALE == es_ES || $LOCALE == zh_CN ]]; then
        LOCALE_TB=`echo $LOCALE | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
      elif [[ $LOCALE == es_CL ]]; then
        LOCALE_TB="es-es"
      else
        LOCALE_TB=`echo $LOCALE | cut -d\_ -f1`
      fi
      #}}}
      #HUNSPELL #{{{
      if [[ $LOCALE == pt_BR ]]; then
        LOCALE_HS=`echo $LOCALE | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
      elif [[ $LOCALE == pt_PT ]]; then
        LOCALE_HS="pt_pt"
      else
        LOCALE_HS=`echo $LOCALE | cut -d\_ -f1`
      fi
      #}}}
      #ASPELL #{{{
      LOCALE_AS=`echo $LOCALE | cut -d\_ -f1`
      #}}}
      #LIBREOFFICE #{{{
      if [[ $LOCALE == pt_BR || $LOCALE == en_GB || $LOCALE == en_US || $LOCALE == zh_CN ]]; then
        LOCALE_LO=`echo $LOCALE | sed 's/_/-/'`
      else
        LOCALE_LO=`echo $LOCALE | cut -d\_ -f1`
      fi
      #}}}
      ;;
    *)
      ;;
  esac
}
#}}}
#SELECT/CREATE USER {{{
select_user(){
  #CREATE NEW USER {{{
  create_new_user(){
    read -p "Username: " USER_NAME
    useradd -m -g users -G video,audio,network,optical,storage,disk,wheel -s /bin/bash ${USER_NAME}
    chfn ${USER_NAME}
    passwd ${USER_NAME}
    pause_function
    configure_user_account
  }
  #}}}
  #CONFIGURE USER ACCOUNT {{{
  configure_user_account(){
    #BASHRC {{{
    print_title "BASHRC - https://wiki.archlinux.org/index.php/Bashrc"
    bashrc_list=("Default" "Vanilla" "Get from github");
    PS3="$prompt1"
    echo -e "Choose your .bashrc\n"
    select OPT in "${bashrc_list[@]}"; do
      case "$REPLY" in
        1)
          package_install "git"
          git clone https://github.com/tuxstorm/dotfiles
          cp dotfiles/.bashrc dotfiles/.dircolors dotfiles/.dircolors_256 dotfiles/.nanorc ~/
          cp dotfiles/.bashrc dotfiles/.dircolors dotfiles/.dircolors_256 dotfiles/.nanorc /home/${USER_NAME}/
          rm -fr dotfiles
          ;;
        2)
          cp /etc/skel/.bashrc /home/${USER_NAME}
          ;;
        *)
          invalid_option
          ;;
      esac
      [[ -n $OPT ]] && break
    done
    #}}}
    #EDITOR {{{
    print_title "DEFAULT EDITOR"
    editors_list=("emacs" "joe" "nano" "vi" "vim" "zile");
    PS3="$prompt1"
    echo -e "Select editor\n"
    select EDITOR in "${editors_list[@]}"; do
      if contains_element "$EDITOR" "${editors_list[@]}"; then
        if [[ $EDITOR == joe ]]; then
          ! is_package_installed "joe" && aui_download_packages "joe"
        elif [[ $EDITOR == vim ]]; then
          ! is_package_installed "gvim" && package_install "vim ctags"
          #VIMRC {{{
          if [[ ! -f /home/${USER_NAME}/.vimrc ]]; then
            vimrc_list=("Default" "Vanilla" "Get from github");
            PS3="$prompt1"
            echo -e "Choose your .vimrc\n"
            select OPT in "${vimrc_list[@]}"; do
              case "$REPLY" in
                1)
                  package_install "git"
                  git clone https://github.com/helmuthdu/vim
                  mv vim /home/${USER_NAME}/.vim
                  ln -sf /home/${USER_NAME}/.vim/vimrc /home/${USER_NAME}/.vimrc
                  cp -R vim /home/${USER_NAME}/.vim/fonts /home/${USER_NAME}/.fonts
                  ;;
                3)
                  package_install "git"
                  read -p "Enter your github username [ex: helmuthdu]: " GITHUB_USER
                  read -p "Enter your github repository [ex: vim]: " GITHUB_REPO
                  git clone https://github.com/$GITHUB_USER/$GITHUB_REPO
                  cp -R $GITHUB_REPO/.vim /home/${USER_NAME}/
                  if [[ -f $GITHUB_REPO/vimrc ]]; then
                    ln -sf /home/${USER_NAME}/.vim/vimrc /home/${USER_NAME}/.vimrc
                  else
                    ln -sf /home/${USER_NAME}/.vim/.vimrc /home/${USER_NAME}/.vimrc
                  fi
                  rm -fr $GITHUB_REPO
                  ;;
                2)
                  echo "Nothing to do..."
                  ;;
                *)
                  invalid_option
                  ;;
              esac
              [[ -n $OPT ]] && break
            done
          fi
          #}}}
        else
          package_install "$EDITOR"
        fi
        break
      else
        invalid_option
      fi
    done
    #}}}
    chown -R ${USER_NAME}:users /home/${USER_NAME}
  }
  #}}}
  print_title "SELECT/CREATE USER ACCOUNT - https://wiki.archlinux.org/index.php/Users_and_Groups"
  users_list=(`cat /etc/passwd | grep "/home" | cut -d: -f1`);
  PS3="$prompt1"
  echo "Avaliable Users:"
  if [[ $(( ${#users_list[@]} )) -gt 0 ]]; then
    print_warning "WARNING: THE SELECTED USER MUST HAVE SUDO PRIVILEGES"
  else
    echo ""
  fi
  select OPT in "${users_list[@]}" "Create new user"; do
    if [[ $OPT == "Create new user" ]]; then
      create_new_user
    elif contains_element "$OPT" "${users_list[@]}"; then
      USER_NAME=$OPT
    else
      invalid_option
    fi
    [[ -n $OPT ]] && break
  done
  [[ ! -f /home/${USER_NAME}/.bashrc ]] && configure_user_account;
}
#}}}
#CONFIGURE SUDO {{{
configure_sudo(){
  if ! is_package_installed "sudo" ; then
    print_title "SUDO - https://wiki.archlinux.org/index.php/Sudo"
    package_install "sudo"
  fi
  #CONFIGURE SUDOERS {{{
  if [[ ! -f  /etc/sudoers.aui ]]; then
    cp -v /etc/sudoers /etc/sudoers.aui
    ## Uncomment to allow members of group wheel to execute any command
    sed -i '/%wheel ALL=(ALL) ALL/s/^#//' /etc/sudoers
    ## Same thing without a password (not secure)
    #sed -i '/%wheel ALL=(ALL) NOPASSWD: ALL/s/^#//' /etc/sudoers

    #This config is especially helpful for those using terminal multiplexers like screen, tmux, or ratpoison, and those using sudo from scripts/cronjobs:
    echo "" >> /etc/sudoers
    echo 'Defaults !requiretty, !tty_tickets, !umask' >> /etc/sudoers
    echo 'Defaults visiblepw, path_info, insults, lecture=always' >> /etc/sudoers
    echo 'Defaults loglinelen=0, logfile =/var/log/sudo.log, log_year, log_host, syslog=auth' >> /etc/sudoers
    echo 'Defaults passwd_tries=3, passwd_timeout=1' >> /etc/sudoers
    echo 'Defaults env_reset, always_set_home, set_home, set_logname' >> /etc/sudoers
    echo 'Defaults !env_editor, editor="/usr/bin/vim:/usr/bin/vi:/usr/bin/nano"' >> /etc/sudoers
    echo 'Defaults timestamp_timeout=300' >> /etc/sudoers
    echo 'Defaults passprompt="[sudo] password for %u: "' >> /etc/sudoers
  fi
  #}}}
}
#}}}
#AUR HELPER {{{
choose_aurhelper(){
  print_title "AUR HELPER - https://wiki.archlinux.org/index.php/AUR_Helpers"
  print_info "AUR Helpers are written to make using the Arch User Repository more comfortable."
  print_warning "\tNone of these tools are officially supported by Arch devs."
  aurhelper=("Yaourt" "Packer" "Pacaur")
  PS3="$prompt1"
  echo -e "Installing PACAUR as the default AUR Helper\n"
 
        if ! is_package_installed "pacaur" ; then
          package_install "base-devel yajl expac"
          pacman -D --asdeps yajl expac
          #fix pod2man path
          ln -s /usr/bin/core_perl/pod2man /usr/bin/
          aui_download_packages "cower pacaur"
          pacman -D --asdeps cower
          if ! is_package_installed "pacaur" ; then
            echo "Pacaur not installed. EXIT now"
            pause_function
            exit 0
          fi
        fi
        AUR_PKG_MANAGER="pacaur"
 
#  pause_function
}
#}}}
#POWERPILL {{{
install_powerpill (){
  print_title "POWERPILL - https://wiki.archlinux.org/index.php/Powerpill"
  print_info "Powerpill is a Pacman wrapper that uses parallel and segmented downloading to try to speed up downloads for Pacman."
  read_input_text "Install Powerpill"
  if [[ $OPTION == y ]]; then
    aur_package_install "powerpill"
  fi
  is_package_installed "powerpill" && PKG_MANAGER="powerpill"
}
#}}}
#AUTOMATIC MODE {{{
automatic_mode(){
  print_title "AUTOMATIC MODE"
  print_info "Create a custom install with all options pre-selected.\nUse this option with care."
  print_warning "\tUse this mode only if you already know all the option.\n\tYou won't be able to select anything later."
  read_input_text "Enable Automatic Mode"
  if [[ $OPTION == y ]]; then
    $EDITOR ${AUI_DIR}/aui_automode
    source ${AUI_DIR}/aui_automode
    echo -e "The installation will start now."
    pause_function
    AUTOMATIC_MODE=1
  fi
}
#}}}
#CUSTOM REPOSITORIES {{{
add_custom_repositories(){
  # ENABLE MULTILIB REPOSITORY {{{
  # this option will avoid any problem with packages install
  if [[ $ARCHI == x86_64 ]]; then
    local MULTILIB=`grep -n "\[multilib\]" /etc/pacman.conf | cut -f1 -d:`
    if [[ -z $MULTILIB ]]; then
      echo -e "\n[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
      echo -e '\nMultilib repository added into pacman.conf file'
    else
      sed -i "${MULTILIB}s/^#//" /etc/pacman.conf
      local MULTILIB=$(( $MULTILIB + 1 ))
      sed -i "${MULTILIB}s/^#//" /etc/pacman.conf
    fi
  fi
  #}}}
  print_title "CUSTOM REPOSITORIES - https://wiki.archlinux.org/index.php/Unofficial_User_Repositories"
  read_input_text "Add custom repositories" $CUSTOMREPO
  if [[ $OPTION == y ]]; then
    while true
    do
      print_title "CUSTOM REPOSITORIES - https://wiki.archlinux.org/index.php/Unofficial_User_Repositories"
      echo " 1) \"Add new repository\""
      echo ""
      echo " d) DONE"
      echo ""
      read -p "$prompt1" OPTION
      case $OPTION in
        1)
          read -p "Repository Name [ex: custom]: " REPONAME
          read -p "Repository Address [ex: file:///media/backup/Archlinux]: " REPOADDRESS
          echo -e '\n['"$REPONAME"']\nServer = '"$REPOADDRESS"/'$arch' >> /etc/pacman.conf
          echo -e '\nCustom repository added into pacman.conf file'
          pause_function
          ;;
        "d")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
  fi
  system_update
}
#}}}
#BASIC SETUP {{{
install_basic_setup(){
  print_title "BASH TOOLS - https://wiki.archlinux.org/index.php/Bash"
  package_install "bc rsync mlocate bash-completion pkgstats wget"
  print_title "NTPd - https://wiki.archlinux.org/index.php/NTPd"
  package_install "ntp"
  is_package_installed "ntp" && timedatectl set-ntp true
#  pause_function
  print_title "(UN)COMPRESS TOOLS - https://wiki.archlinux.org/index.php/P7zip"
  package_install "zip unzip unrar p7zip file-roller"
#  pause_function
  print_title "AVAHI - https://wiki.archlinux.org/index.php/Avahi"
  print_info "Avahi is a free Zero Configuration Networking (Zeroconf) implementation, including a system for multicast DNS/DNS-SD discovery. It allows programs to publish and discovers and hosts running on a local network with no specific configuration."
  package_install "avahi nss-mdns"
  is_package_installed "avahi" && system_ctl enable avahi-daemon
  is_package_installed "avahi" && system_ctl enable avahi-dnsconfd
#  pause_function
  print_title "ALSA - https://wiki.archlinux.org/index.php/Alsa"
  print_info "The Advanced Linux Sound Architecture (ALSA) is a Linux kernel component intended to replace the original Open Sound System (OSSv3) for providing device drivers for sound cards."
  package_install "alsa-utils alsa-plugins"
  [[ ${ARCHI} == x86_64 ]] && package_install "lib32-alsa-plugins"
#  pause_function
  print_title "PULSEAUDIO - https://wiki.archlinux.org/index.php/Pulseaudio"
  print_info "PulseAudio is the default sound server that serves as a proxy to sound applications using existing kernel sound components like ALSA or OSS"
  package_install "pulseaudio pulseaudio-alsa"
  [[ ${ARCHI} == x86_64 ]] && package_install "lib32-libpulse"
  # automatically switch to newly-connected devices
  add_line "load-module module-switch-on-connect" "/etc/pulse/default.pa"
#  pause_function
  print_title "NTFS/FAT/exFAT - https://wiki.archlinux.org/index.php/File_Systems"
  print_info "A file system (or filesystem) is a means to organize data expected to be retained after a program terminates by providing procedures to store, retrieve and update data, as well as manage the available space on the device(s) which contain it. A file system organizes data in an efficient manner and is tuned to the specific characteristics of the device."
  package_install "ntfs-3g dosfstools exfat-utils fuse fuse-exfat"
  is_package_installed "fuse" && add_module "fuse"
#  pause_function
}
#}}}
#SSH {{{
install_ssh(){
  print_title "SSH - https://wiki.archlinux.org/index.php/Ssh"
  print_info "Secure Shell (SSH) is a network protocol that allows data to be exchanged over a secure channel between two computers."
    package_install "openssh"
#REMOVE??#    aur_package_install "rssh"
    system_ctl enable sshd
    [[ ! -f /etc/ssh/sshd_config.aui ]] && cp -v /etc/ssh/sshd_config /etc/ssh/sshd_config.aui;
    #CONFIGURE SSHD_CONF #{{{
      sed -i '/Port 22/s/^#//' /etc/ssh/sshd_config
      sed -i '/Protocol 2/s/^#//' /etc/ssh/sshd_config
      sed -i '/HostKey \/etc\/ssh\/ssh_host_rsa_key/s/^#//' /etc/ssh/sshd_config
      sed -i '/HostKey \/etc\/ssh\/ssh_host_dsa_key/s/^#//' /etc/ssh/sshd_config
      sed -i '/HostKey \/etc\/ssh\/ssh_host_ecdsa_key/s/^#//' /etc/ssh/sshd_config
      sed -i '/KeyRegenerationInterval/s/^#//' /etc/ssh/sshd_config
      sed -i '/ServerKeyBits/s/^#//' /etc/ssh/sshd_config
      sed -i '/SyslogFacility/s/^#//' /etc/ssh/sshd_config
      sed -i '/LogLevel/s/^#//' /etc/ssh/sshd_config
      sed -i '/LoginGraceTime/s/^#//' /etc/ssh/sshd_config
      sed -i '/PermitRootLogin/s/^#//' /etc/ssh/sshd_config
      sed -i '/HostbasedAuthentication/s/^#//' /etc/ssh/sshd_config
      sed -i '/StrictModes/s/^#//' /etc/ssh/sshd_config
      sed -i '/RSAAuthentication/s/^#//' /etc/ssh/sshd_config
      sed -i '/PubkeyAuthentication/s/^#//' /etc/ssh/sshd_config
      sed -i '/IgnoreRhosts/s/^#//' /etc/ssh/sshd_config
      sed -i '/PermitEmptyPasswords/s/^#//' /etc/ssh/sshd_config
      sed -i '/AllowTcpForwarding/s/^#//' /etc/ssh/sshd_config
      sed -i '/AllowTcpForwarding no/d' /etc/ssh/sshd_config
      sed -i '/X11Forwarding/s/^#//' /etc/ssh/sshd_config
      sed -i '/X11Forwarding/s/no/yes/' /etc/ssh/sshd_config
      sed -i -e '/\tX11Forwarding yes/d' /etc/ssh/sshd_config
      sed -i '/X11DisplayOffset/s/^#//' /etc/ssh/sshd_config
      sed -i '/X11UseLocalhost/s/^#//' /etc/ssh/sshd_config
      sed -i '/PrintMotd/s/^#//' /etc/ssh/sshd_config
      sed -i '/PrintMotd/s/yes/no/' /etc/ssh/sshd_config
      sed -i '/PrintLastLog/s/^#//' /etc/ssh/sshd_config
      sed -i '/TCPKeepAlive/s/^#//' /etc/ssh/sshd_config
      sed -i '/the setting of/s/^/#/' /etc/ssh/sshd_config
      sed -i '/RhostsRSAAuthentication and HostbasedAuthentication/s/^/#/' /etc/ssh/sshd_config
    #}}}
#    pause_function
}
#}}}
#NFS {{{
install_nfs(){
  print_title "NFS - https://wiki.archlinux.org/index.php/Nfs"
  print_info "NFS allowing a user on a client computer to access files over a network in a manner similar to how local storage is accessed."
  read_input_text "Install nfs" $NFS
  if [[ $OPTION == y ]]; then
    package_install "nfs-utils"
    system_ctl enable rpc-idmapd
    system_ctl enable rpc-mountd
    pause_function
  fi
}
#}}}
#SAMBA {{{
install_samba(){
  print_title "SAMBA - https://wiki.archlinux.org/index.php/Samba"
  print_info "Samba is a re-implementation of the SMB/CIFS networking protocol, it facilitates file and printer sharing among Linux and Windows systems as an alternative to NFS."
  read_input_text "Install Samba" $SAMBA
  if [[ $OPTION == y ]]; then
    package_install "samba smbnetfs"
    [[ ! -f /etc/samba/smb.conf ]] && cp /etc/samba/smb.conf.default /etc/samba/smb.conf
    local CONFIG_SAMBA=`cat /etc/samba/smb.conf | grep usershare`
    if [[ -z $CONFIG_SAMBA ]]; then
      # configure usershare
      export USERSHARES_DIR="/var/lib/samba/usershares"
      export USERSHARES_GROUP="sambashare"
      mkdir -p ${USERSHARES_DIR}
      groupadd ${USERSHARES_GROUP}
      chown root:${USERSHARES_GROUP} ${USERSHARES_DIR}
      chmod 01770 ${USERSHARES_DIR}
      sed -i -e '/\[global\]/a\\n   usershare path = /var/lib/samba/usershares\n   usershare max shares = 100\n   usershare allow guests = yes\n   usershare owner only = False' /etc/samba/smb.conf
      usermod -a -G ${USERSHARES_GROUP} ${USER_NAME}
      sed -i '/user_allow_other/s/^#//' /etc/fuse.conf
      modprobe fuse
    fi
    # enable services
    system_ctl enable smbd
    system_ctl enable nmbd
    # automatic mounting
    system_ctl enable smbnetfs
    pause_function
  fi
}
#}}}
#READAHEAD {{{
enable_readahead(){
  print_title "Readahead - https://wiki.archlinux.org/index.php/Improve_Boot_Performance"
  print_info "Systemd comes with its own readahead implementation, this should in principle improve boot time. However, depending on your kernel version and the type of your hard drive, your mileage may vary (i.e. it might be slower)."
  read_input_text "Enable Readahead" $READAHEAD
  if [[ $OPTION == y ]]; then
    system_ctl enable systemd-readahead-collect
    system_ctl enable systemd-readahead-replay
    pause_function
  fi
}
#}}}
#ZRAM {{{
install_zram (){
  print_title "ZRAM - https://wiki.archlinux.org/index.php/Maximizing_Performance"
  print_info "Zram creates a device in RAM and compresses it. If you use for swap means that part of the RAM can hold much more information but uses more CPU. Still, it is much quicker than swapping to a hard drive. If a system often falls back to swap, this could improve responsiveness. Zram is in mainline staging (therefore its not stable yet, use with caution)."
  read_input_text "Install Zram" $ZRAM
  if [[ $OPTION == y ]]; then
    aur_package_install "zramswap"
    system_ctl enable zramswap
    pause_function
  fi
}
#}}}
#TLP {{{
install_tlp(){
  print_title "TLP - https://wiki.archlinux.org/index.php/Tlp"
  print_info "TLP is an advanced power management tool for Linux. It is a pure command line tool with automated background tasks and does not contain a GUI."
  read_input_text "Install TLP " $TLP
  if [[ $OPTION == y ]]; then
    aur_package_install "tlp"
    tlp start
    system_ctl enable tlp
    pause_function
  fi
}
#}}}
#XORG {{{
install_xorg(){
  print_title "XORG - https://wiki.archlinux.org/index.php/Xorg"
  print_info "Xorg is the public, open-source implementation of the X window system version 11."
  echo "Installing X-Server (req. for Desktopenvironment, GPU Drivers, Keyboardlayout,...)"
  package_install "xorg-server xorg-server-utils xorg-xinit"
  package_install "xf86-input-synaptics xf86-input-mouse xf86-input-keyboard"
  package_install "mesa"
  package_install "gamin"
  KEYMAP=$(localectl status | grep Keymap | awk '{print $3}')
  localectl set-keymap ${KEYMAP}
#pause_function
}
#}}}
## #FONT CONFIGURATION {{{
## font_config(){
##    print_title "FONTS CONFIGURATION - https://wiki.archlinux.org/index.php/Font_Configuration"
##   print_info "Fontconfig is a library designed to provide a list of available fonts to applications, and also for configuration for how fonts get rendered."
##   
##       is_package_installed "freetype2-infinality" && pacman -Rdds freetype2-infinality fontconfig-infinality
##        is_package_installed "freetype2-ubuntu" && pacman -Rdds freetype2-ubuntu fontconfig-ubuntu cairo-ubuntu
##       pacman -S --asdeps --needed cairo fontconfig freetype2 libxft
##        #enable global fonts configs
##        cd /etc/fonts/conf.d
##        [[ ! -f /etc/fonts/conf.d/10-sub-pixel-rgb.conf ]] && ln -sv ../conf.avail/10-sub-pixel-rgb.conf
##        [[ ! -f /etc/fonts/conf.d/10-autohint.conf ]] && ln -sv ../conf.avail/10-autohint.conf
##        [[ ! -f /etc/fonts/conf.d/11-lcdfilter-default.conf ]] && ln -sv ../conf.avail/11-lcdfilter-default.conf
##        [[ ! -f /etc/fonts/conf.d/70-no-bitmaps.conf ]] && ln -s ../conf.avail/70-no-bitmaps.conf
##        cd $AUI_DIR
## pause_function
##}
###}}}



#FONT CONFIGURATION {{{
font_config(){
  while true
  do
    print_title "FONTS CONFIGURATION - https://wiki.archlinux.org/index.php/Font_Configuration"
    print_info "Fontconfig is a library designed to provide a list of available fonts to applications, and also for configuration for how fonts get rendered."
    echo " 1) Default"
    echo " 2) Ubuntu"
    echo ""
    read_input $FONTCONFIG
    case "$OPTION" in
      1)
        is_package_installed "freetype2-ubuntu" && pacman -Rdds freetype2-ubuntu fontconfig-ubuntu cairo-ubuntu
        pacman -S --asdeps --needed cairo fontconfig freetype2 libxft
        break
        ;;
      2)
        is_package_installed "freetype2" && pacman -Rdds --noconfirm freetype2 fontconfig cairo libxft
        aur_package_install "fontconfig-ubuntu cairo-ubuntu"
        break
        ;;
      *)
        invalid_option
        ;;
    esac
  done
  pause_function
}
#}}}












#VIDEO CARDS {{{
install_video_cards(){
  package_install "dmidecode"
  print_title "VIDEO CARD"
  check_vga
  #Virtualbox {{{
  if [[ ${VIDEO_DRIVER} == virtualbox ]]; then
    package_install "virtualbox-guest-utils"
    add_module "vboxguest vboxsf vboxvideo" "virtualbox-guest"
    add_user_to_group ${USER_NAME} vboxsf
    system_ctl disable ntpd
    system_ctl enable vbo
    VBoxClient-all
  #}}}
  #NVIDIA {{{
  elif [[ ${VIDEO_DRIVER} == nvidia ]]; then
    XF86_DRIVERS=$(pacman -Qe | grep xf86-video | awk '{print $1}')
    [[ -n $XF86_DRIVERS ]] && pacman -Rcsn $XF86_DRIVERS
    is_package_installed "nouveau-dri" && pacman -Rdds --noconfirm nouveau-dri
    pacman -S --needed nvidia{,-utils}
    package_install "pangox-compat" #fix nvidia-settings
    package_install "libva-vdpau-driver"
    if [[ ${ARCHI} == x86_64 ]]; then
      is_package_installed "lib32-nouveau-dri" && pacman -Rdds --noconfirm lib32-nouveau-dri
      pacman -S --needed "lib32-nvidia-utils"
    fi
    replace_line '*options nouveau modeset=1' '#options nouveau modeset=1' /etc/modprobe.d/modprobe.conf
    replace_line '*MODULES="nouveau"' '#MODULES="nouveau"' /etc/mkinitcpio.conf
    mkinitcpio -p linux
    nvidia-xconfig --add-argb-glx-visuals --allow-glx-with-composite --composite -no-logo --render-accel -o /etc/X11/xorg.conf.d/20-nvidia.conf;
  #}}}
  #Nouveau [NVIDIA] {{{
  elif [[ ${VIDEO_DRIVER} == nouveau ]]; then
    is_package_installed "nvidia" && pacman -Rdds --noconfirm nvidia{,-utils}
    [[ -f /etc/X11/xorg.conf.d/20-nvidia.conf ]] && rm /etc/X11/xorg.conf.d/20-nvidia.conf
    pacman -S --asdeps mesa-libgl
    package_install "xf86-video-${VIDEO_DRIVER} ${VIDEO_DRIVER}-dri"
    if [[ ${ARCHI} == x86_64 ]]; then
      is_package_installed "lib32-nvidia-utils" && pacman -Rdds --noconfirm lib32-nvidia-utils
      pacman -S --needed "lib32-${VIDEO_DRIVER}-dri"
    fi
    replace_line '#*options nouveau modeset=1' 'options nouveau modeset=1' /etc/modprobe.d/modprobe.conf
    replace_line '#*MODULES="nouveau"' 'MODULES="nouveau"' /etc/mkinitcpio.conf
    mkinitcpio -p linux
  #}}}
  #Catalyst [ATI] {{{
  elif [[ ${VIDEO_DRIVER} == catalyst ]]; then
    XF86_DRIVERS=$(pacman -Qe | grep xf86-video | awk '{print $1}')
    [[ -n $XF86_DRIVERS ]] && pacman -Rcsn $XF86_DRIVERS
    is_package_installed "ati-dri" && pacman package_remove "ati-dri"
    [[ -f /etc/modules-load.d/ati.conf ]] && rm /etc/modules-load.d/ati.conf
    package_install "linux-headers"
    # Add repository
    pacman-key --keyserver pgp.mit.edu --recv-keys 0xabed422d653c3094
    pacman-key --lsign-key 0xabed422d653c3094
    add_repository "catalyst" "http://catalyst.wirephire.com/repo/catalyst/\$arch"
    pacman -S --needed catalyst catalyst-utils
    if [[ ${ARCHI} == x86_64 ]]; then
      is_package_installed "lib32-ati-dri" && pacman -Rdds --noconfirm lib32-ati-dri
      pacman -S --needed "lib32-catalyst-utils"
    fi
    package_install "catalyst-hook"
    system_ctl enable catalyst-hook
    aticonfig --initial --output=/etc/X11/xorg.conf.d/20-radeon.conf
    add_module "fglrx" "ati"
  #}}}
  #ATI {{{
  elif [[ ${VIDEO_DRIVER} == ati ]]; then
    is_package_installed "catalyst-dkms" && pacman -Rdds --noconfirm catalyst{-dkms,-utils} lib32-catalyst-utils
    pacman -S --asdeps mesa-libgl
    [[ -f /etc/X11/xorg.conf.d/20-radeon.conf ]] && rm /etc/X11/xorg.conf.d/20-radeon.conf
    [[ -f /etc/modules-load.d/ati.conf ]] && rm /etc/modules-load.d/ati.conf
    package_install "xf86-video-${VIDEO_DRIVER} ${VIDEO_DRIVER}-dri"
    if [[ ${ARCHI} == x86_64 ]]; then
      is_package_installed "lib32-catalyst-utils" && pacman -Rdds --noconfirm lib32-catalyst-utils
      package_install "lib32-${VIDEO_DRIVER}-dri"
    fi
    add_module "radeon" "ati"
  #}}}
  #Intel {{{
  elif [[ ${VIDEO_DRIVER} == intel ]]; then
    package_install "xf86-video-intel intel-dri libva-intel-driver"
    [[ ${ARCHI} == x86_64 ]] && package_install "lib32-mesa-libgl"
  #}}}
  #Vesa {{{
  else
    package_install "xf86-video-${VIDEO_DRIVER}"
    [[ ${ARCHI} == x86_64 ]] && package_install "lib32-mesa-libgl"
  fi
  #}}}
  pause_function
}
#}}}
#CUPS {{{
install_cups(){
  print_title "CUPS - https://wiki.archlinux.org/index.php/Cups"
  print_info "CUPS is the standards-based, open source printing system developed by Apple Inc. for Mac OS® X and other UNIX®-like operating systems."
  read_input_text "Install CUPS (aka Common Unix Printing System)" $CUPS
  if [[ $OPTION == y ]]; then
    package_install "cups cups-filters ghostscript gsfonts"
    package_install "gutenprint foomatic-db foomatic-db-engine foomatic-db-nonfree foomatic-filters hplip splix cups-pdf"
    package_install "system-config-printer"
    system_ctl enable cups
#    pause_function
  fi
}
#}}}

#GIT ACCESS THRU A FIREWALL {{{
install_git_tor(){
  print_title "GIT-TOR - https://wiki.archlinux.org/index.php/Tor"
  print_info "Tor is an open source implementation of 2nd generation onion routing that provides free access to an anonymous proxy network. Its primary goal is to enable online anonymity by protecting against traffic analysis attacks."
  read_input_text "Ensuring access to GIT through a firewall (bypass college/work firewall)" $GITTOR
  if [[ $OPTION == y ]]; then
    package_install "openbsd-netcat vidalia privoxy git"
    if [[ ! -f /usr/bin/proxy-wrapper ]]; then
      echo 'forward-socks5   /               127.0.0.1:9050 .' >> /etc/privoxy/config
      echo -e '#!/bin/bash\nnc -xlocalhost:9050 -X5 $*' > /usr/bin/proxy-wrapper
      chmod +x /usr/bin/proxy-wrapper
      echo -e '\nexport GIT_PROXY_COMMAND="/usr/bin/proxy-wrapper"' >> /etc/bash.bashrc
      export GIT_PROXY_COMMAND="/usr/bin/proxy-wrapper"
      su - ${USER_NAME} -c 'export GIT_PROXY_COMMAND="/usr/bin/proxy-wrapper"'
    fi
    groupadd -g 42 privoxy
    useradd -u 42 -g privoxy -s /bin/false -d /etc/privoxy privoxy
    system_ctl start tor
    system_ctl start privoxy
    system_ctl enable tor
    system_ctl enable privoxy
    pause_function
  fi
}
#}}}


#DEVELOPEMENT {{{
install_development_apps(){
  while true
  do
    print_title "DEVELOPMENT APPS"
    echo " 1) $(menu_item "aptana-studio") $AUR"
    echo " 2) $(menu_item "bluefish")"
    echo " 3) $(menu_item "eclipse")"
    echo " 4) $(menu_item "emacs")"
    echo " 5) $(menu_item "gvim")"
    echo " 6) $(menu_item "geany")"
    echo " 7) $(menu_item "intellij-idea-community-edition" "IntelliJ IDEA")"
    echo " 8) $(menu_item "kdevelop")"
    echo " 9) $(menu_item "lighttable") $AUR"
    echo "10) $(menu_item "monodevelop")"
    echo "11) $(menu_item "netbeans")"
    echo "12) $(menu_item "nodejs")"
    echo "13) $(menu_item "jdk7-openjdk" "OpenJDK")"
    echo "14) $(menu_item "jdk" "Oracle JDK") $AUR"
    echo "15) $(menu_item "qtcreator")"
    echo "16) $(menu_item "sublime-text" "Sublime Text") $AUR"
    echo "17) $(menu_item "gdb" "Debuggers")"
    echo "18) $(menu_item "mysql-workbench-gpl" "MySQL Workbench") $AUR"
    echo "19) $(menu_item "dbschema") $AUR"
    echo "20) $(menu_item "meld")"
    echo ""
    echo " b) BACK"
    echo ""
    DEVELOPMENT_OPTIONS+=" b"
    read_input_options "$DEVELOPMENT_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          aur_package_install "aptana-studio"
          ;;
        2)
          package_install "bluefish"
          ;;
        3)
          #ECLIPSE {{{
          while true
          do
            print_title "ECLIPSE - https://wiki.archlinux.org/index.php/Eclipse"
            print_info "Eclipse is an open source community project, which aims to provide a universal development platform."
            echo " 1) $(menu_item "eclipse")"
            echo " 2) $(menu_item "eclipse-cdt" "Eclipse IDE for C/C++ Developers")"
            echo " 3) $(menu_item "eclipse-android" "Android Development Tools for Eclipse") $AUR"
            echo " 4) $(menu_item "eclipse-wtp-wst" "Web Development Tools for Eclipse") $AUR"
            echo " 5) $(menu_item "eclipse-pdt" "PHP Development Tools for Eclipse ") $AUR"
            echo " 6) $(menu_item "eclipse-pydev" "Python Development Tools for Eclipse") $AUR"
            echo " 7) $(menu_item "eclipse-aptana" "Aptana Studio plugin for Eclipse") $AUR"
            echo " 8) $(menu_item "eclipse-vrapper" "Vim-like editing plugin for Eclipse ") $AUR"
            echo " 9) $(menu_item "eclipse-egit" "Git support plugin for Eclipse") $AUR"
            echo "10) $(menu_item "eclipse-eclipsecolortheme" "Eclipse Colortheme") $AUR"
            echo ""
            echo " b) BACK"
            echo ""
            ECLIPSE_OPTIONS+=" b"
            read_input_options "$ECLIPSE_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  package_install "eclipse"
                  ;;
                2)
                  package_install "eclipse-cdt"
                  ;;
                3)
                  aur_package_install "android-sdk android-apktool android-sdk-build-tools android-sdk-platform-tools android-udev eclipse-android libmtp"
                  if [[ ${KDE} -eq 1 ]]; then
                    package_install "kio-mtp"
                  else
                    package_install "gvfs-mtp"
                  fi
                  aur_package_install "simple-mtpfs"
                  groupadd android
                  add_user_to_group ${USER_NAME} android
                  add_user_to_group ${USER_NAME} adbusers
                  chgrp -R android /opt/android-sdk
                  chmod -R g+w /opt/android-sdk
                  find /opt/android-sdk -type d -exec chmod g+s {} \;
                  ;;
                4)
                  aur_package_install "eclipse-wtp-wst"
                  ;;
                5)
                  aur_package_install "eclipse-pdt"
                  ;;
                6)
                  aur_package_install "eclipse-pydev"
                  ;;
                7)
                  aur_package_install "eclipse-aptana"
                  ;;
                8)
                  aur_package_install "eclipse-vrapper"
                  ;;
                9)
                  aur_package_install "eclipse-egit"
                  ;;
                10)
                  aur_package_install "eclipse-eclipsecolortheme"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=3
          ;;
        4)
          package_install "emacs"
          ;;
        5)
          package_remove "vim"
          package_install "gvim ctags"
          ;;
        6)
          package_install "geany"
          ;;
        7)
          package_install "intellij-idea-community-edition"
          ;;
        8)
          package_install "kdevelop"
          ;;
        9)
          aur_package_install "lighttable"
          ;;
        10)
          package_install "monodevelop monodevelop-debugger-gdb"
          ;;
        11)
          package_install "netbeans"
          ;;
        12)
          package_install "nodejs"
          #NODEJS {{{
          while true
          do
            print_title "NODEJS - http://nodejs.org"
            print_info "Node.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices."
            echo " 1) backbone"
            echo " 2) coffee-script"
            echo " 3) express"
            echo " 4) grunt"
            echo " 5) jshint"
            echo " 6) jslint"
            echo " 7) less"
            echo " 8) markdown"
            echo " 9) mocha"
            echo "10) stylus"
            echo "11) uglify-js"
            echo "12) underscore"
            echo ""
            echo " b) BACK"
            echo ""
            NODEJS_OPTIONS+=" b"
            read_input_options "$NODEJS_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  npm_install "backbone"
                  ;;
                2)
                  npm_install "coffee-script"
                  ;;
                3)
                  npm_install "express"
                  ;;
                4)
                  npm_install "grunt"
                  ;;
                5)
                  npm_install "jshint"
                  ;;
                6)
                  npm_install "jslint"
                  ;;
                7)
                  npm_install "less"
                  ;;
                8)
                  npm_install "markdown"
                  ;;
                9)
                  npm_install "mocha"
                  ;;
                10)
                  npm_install "stylus"
                  ;;
                11)
                  npm_install "uglify-js"
                  ;;
                12)
                  npm_install "underscore"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=11
          ;;
        13)
          package_remove "jdk"
          package_install "jdk7-openjdk icedtea-web-java7"
          ;;
        14)
          package_remove "jre7-openjdk"
          package_remove "jdk7-openjdk"
          aur_package_install "jdk"
          ;;
        15)
          package_install "qtcreator"
          mkdir -p /home/${USER_NAME}/.config/Nokia/qtcreator/styles
          curl -o monokai.xml http://angrycoding.googlecode.com/svn/branches/qt-creator-monokai-theme/monokai.xml
          mv monokai.xml /home/${USER_NAME}/.config/Nokia/qtcreator/styles/
          chown -R ${USER_NAME}:users /home/${USER_NAME}/.config
          ;;
        16)
          aur_package_install "sublime-text"
          ;;
        17)
          package_install "splint valgrind gdb" #C/C++
          aur_package_install "php-codesniffer php-tidy" #PHP
          aur_package_install "closure-compiler" #Javascript
          aur_package_install "tidyhtml" #HTML
          ;;
        18)
          aur_package_install "mysql-workbench-gpl"
          ;;
        19)
          aur_package_install "dbschema"
          ;;
        20)
          package_install "meld"
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#OFFICE {{{
install_office_apps(){
  while true
  do
    print_title "OFFICE APPS"
    echo " 1) $(menu_item "libreoffice-common" "LibreOffice")"
    echo " 2) $(menu_item "goffice calligra" "$([[ ${KDE} -eq 1 ]] && echo "Caligra" || echo "Abiword + Gnumeric";)")"
    echo " 3) $(menu_item "texlive-core" "latex")"
    echo " 4) $(menu_item "calibre")"
    echo " 5) $(menu_item "everpad") $AUR"
    echo " 6) $(menu_item "gcstar")"
    echo " 7) $(menu_item "homebank")"
    echo " 8) $(menu_item "impressive")"
    echo " 9) $(menu_item "nitrotasks") $AUR"
    echo "10) $(menu_item "ocrfeeder")"
    echo "11) $(menu_item "uberwriter") $AUR"
    echo "12) $(menu_item "xmind") $AUR"
    echo ""
    echo " b) BACK"
    echo ""
    OFFICE_OPTIONS+=" b"
    read_input_options "$OFFICE_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          print_title "LIBREOFFICE - https://wiki.archlinux.org/index.php/LibreOffice"
          package_install "libreoffice-$LOCALE_LO libreoffice-common libreoffice-base libreoffice-calc libreoffice-draw libreoffice-impress libreoffice-math libreoffice-writer"
          aur_package_install "hunspell-$LOCALE_HS"
          aur_package_install "aspell-$LOCALE_AS"
          [[ ${KDE} -eq 1 ]] && package_install "libreoffice-kde4" || package_install "libreoffice-gnome"
          ;;
        2)
          if [[ ${KDE} -eq 1 ]]; then
            package_install "calligra"
          else
            package_install "gnumeric abiword abiword-plugins"
          fi
          aur_package_install "hunspell-$LOCALE_HS"
          aur_package_install "aspell-$LOCALE_AS"
          ;;
        3)
          package_install "texlive-most"
          if [[ $LOCALE == pt_BR ]]; then
            aur_package_install "abntex"
          fi
          read_input_text "Install texmaker?"
          [[ $OPTION == y ]] && aur_package_install "texmaker"
          ;;
        4)
          package_install "calibre"
          ;;
        5)
          package_install "everpad"
          ;;
        6)
          package_install "gcstar"
          ;;
        7)
          package_install "homebank"
          ;;
        8)
          package_install "impressive"
          ;;
        9)
          aur_package_install "nitrotasks"
          ;;
        10)
          package_install "ocrfeeder tesseract gocr"
          aur_package_install "aspell-$LOCALE_AS"
          ;;
        11)
          aur_package_install "uberwriter"
          ;;
        12)
          aur_package_install "xmind"
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#GRAPHICS {{{
install_graphics_apps(){
  while true
  do
    print_title "GRAPHICS APPS"
    echo " 1) $(menu_item "blender")"
    echo " 2) $(menu_item "gimp")"
    echo " 3) $(menu_item "gradiator")"
    echo " 4) $(menu_item "gthumb")"
    echo " 5) $(menu_item "inkscape")"
    echo " 6) $(menu_item "mcomix")"
    echo " 7) $(menu_item "mypaint")"
    echo " 8) $(menu_item "pencil") [Prototyping Tool] $AUR"
    echo " 9) $(menu_item "scribus")"
    echo "10) $(menu_item "shotwell")"
    echo "11) $(menu_item "simple-scan")"
    echo "12) $(menu_item "xnviewmp") $AUR"
    echo ""
    echo " b) BACK"
    echo ""
    GRAPHICS_OPTIONS+=" b"
    read_input_options "$GRAPHICS_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          package_install "blender"
          ;;
        2)
          package_install "gimp"
          aur_package_install "gimphelp-scriptfu gimp-paint-studio gimpfx-foundry"
          ;;
        3)
          aur_package_install "gradiator"
          ;;
        4)
          package_install "gthumb"
          ;;
        5)
          package_install "inkscape python2-numpy python-lxml"
          aur_package_install "sozi"
          ;;
        6)
          package_install "mcomix"
          ;;
        7)
          package_install "mypaint"
          ;;
        8)
          aur_package_install "pencil"
          ;;
        9)
          package_install "scribus"
          ;;
        10)
          package_install "shotwell"
          ;;
        11)
          package_install "simple-scan"
          ;;
        12)
          aur_package_install "xnviewmp"
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#CLEAN ORPHAN PACKAGES {{{
clean_orphan_packages(){
  print_title "CLEAN ORPHAN PACKAGES"
  pacman -Rsc --noconfirm $(pacman -Qqdt)
  #pacman -Sc --noconfirm
  pacman-optimize
}
#}}}
#RECONFIGURE SYSTEM {{{
reconfigure_system(){
  print_title "KEYMAP - https://wiki.archlinux.org/index.php/KEYMAP"
  print_info "The KEYMAP variable is specified in the /etc/rc.conf file. It defines what keymap the keyboard is in the virtual consoles. Keytable files are provided by the kbd package."
  OPTION=n
  while [[ $OPTION != y ]]; do
    setkeymap
    read_input_text "Confirm keymap: $KEYMAP"
  done
  localectl set-keymap ${KEYMAP}

  print_title "HOSTNAME - https://wiki.archlinux.org/index.php/HOSTNAME"
  print_info "A host name is a unique name created to identify a machine on a network.Host names are restricted to alphanumeric characters.\nThe hyphen (-) can be used, but a host name cannot start or end with it. Length is restricted to 63 characters."
  read -p "Hostname [ex: archlinux]: " HN
  hostnamectl set-hostname $HN

  print_title "TIMEZONE - https://wiki.archlinux.org/index.php/Timezone"
  print_info "In an operating system the time (clock) is determined by four parts: Time value, Time standard, Time Zone, and DST (Daylight Saving Time if applicable)."
  OPTION=n
  while [[ $OPTION != y ]]; do
    settimezone
    read_input_text "Confirm timezone ($ZONE/$SUBZONE)"
  done
  timedatectl set-timezone ${ZONE}/${SUBZONE}

  print_title "HARDWARE CLOCK TIME - https://wiki.archlinux.org/index.php/Internationalization"
  print_info "This is set in /etc/adjtime. Set the hardware clock mode uniformly between your operating systems on the same machine. Otherwise, they will overwrite the time and cause clock shifts (which can cause time drift correction to be miscalibrated)."
  hwclock_list=('UTC' 'Localtime');
  PS3="$prompt1"
  select OPT in "${hwclock_list[@]}"; do
    case "$REPLY" in
      1)
        timedatectl set-local-rtc false
        ;;
      2)
        timedatectl set-local-rtc true
        ;;
      *) invalid_option ;;
    esac
    [[ -n $OPT ]] && break
  done
  timedatectl set-ntp true
}
#}}}
#FINISH {{{
finish(){
  print_title "WARNING: PACKAGES INSTALLED FROM AUR"
  print_warning "List of packages not officially supported that may kill your cat:"
  pause_function
  AUR_PKG_LIST="${AUI_DIR}/aur_pkg_list.log"
  pacman -Qm | awk '{print $1}' > $AUR_PKG_LIST
  nano $AUR_PKG_LIST
  print_title "INSTALL COMPLETED"
  echo -e "Thanks for using the Archlinux Ultimate Install script by helmuthdu\n"
  #REBOOT
  read -p "Reboot your system [y/N]: " OPTION
  [[ $OPTION == y ]] && reboot
  exit 0
}
#}}}

welcome
check_root
check_archlinux
check_hostname
check_connection
check_pacman_blocked
system_upgrade
language_selector
configure_sudo
select_user
choose_aurhelper
reconfigure_system
#pause_function
add_custom_repositories
#pause_function

	install_basic_setup

	install_ssh

	install_xorg

	font_config

	install_video_cards

	install_cups

#XFCE {{{
	print_title "XFCE - https://wiki.archlinux.org/index.php/Xfce"
	print_info "Xfce is a free software desktop environment for Unix and Unix-like platforms, such as Linux, Solaris, and BSD. It aims to be fast and lightweight, while still being visually appealing and easy to use."
	package_install "xfce4 xfce4-goodies"
	package_install "gvfs"
	package_install "xdg-user-dirs"
	package_install "xscreensaver"
	aur_package_install "gnome-defaults-list"
      # config xinitrc
	config_xinitrc "startxfce4"
      #Abstraction for enumerating power devices, listening to device events and querying history and statistics
	system_ctl enable upower
      #}}}
#pause_function

## Display Manager
	print_title "DISPLAY MANAGER - https://wiki.archlinux.org/index.php/Display_Manager"
	print_info "A display manager, or login manager, is a graphical interface screen that is displayed at the end of the boot process in place of the default shell."
	package_install "lightdm lightdm-gtk3-greeter accountsservice"
	system_ctl enable lightdm

	# Modifications to the greeter to make it look a little better.
	echo '' >> /etc/lightdm/lightdm-gtk-greeter.conf
	echo '# Lines below added from the Arch XFCE Finisher script' >> /etc/lightdm/lightdm-gtk-greeter.conf
#	echo '[greeter]' >> /etc/lightdm/lightdm-gtk-greeter.conf
	echo 'background=/usr/share/backgrounds/xfce/black-background-3211.jpg' >> /etc/lightdm/lightdm-gtk-greeter.conf
	echo 'theme-name=Greybird' >> /etc/lightdm/lightdm-gtk-greeter.conf
	echo 'icon-theme-name=gnome-wise' >> /etc/lightdm/lightdm-gtk-greeter.conf
	echo 'font-name=Droid Sans 10' >> /etc/lightdm/lightdm-gtk-greeter.conf
	echo 'xft-antialias=true' >> /etc/lightdm/lightdm-gtk-greeter.conf
	echo 'xft-dpi=96' >> /etc/lightdm/lightdm-gtk-greeter.conf
	echo 'xft-hintstyle=slight' >> /etc/lightdm/lightdm-gtk-greeter.conf
	echo 'xft-rgba=rgb' >> /etc/lightdm/lightdm-gtk-greeter.conf
	echo 'show-language-selector=true' >> /etc/lightdm/lightdm-gtk-greeter.conf
	echo 'show-indicators=' >> /etc/lightdm/lightdm-gtk-greeter.conf
	echo 'show-clock=true' >> /etc/lightdm/lightdm-gtk-greeter.conf
	echo 'clock-format=%a, %h %e %l:%M:%S%p' >> /etc/lightdm/lightdm-gtk-greeter.conf
	echo 'keyboard=onboard' >> /etc/lightdm/lightdm-gtk-greeter.conf

#pause_function

## Network Manager
	print_title "NETWORKMANAGER - https://wiki.archlinux.org/index.php/Networkmanager"
	print_info "NetworkManager is a program for providing detection and configuration for systems to automatically connect to network. NetworkManager's functionality can be useful for both wireless and wired networks."
	package_install "networkmanager dnsmasq network-manager-applet"
	is_package_installed "ntp" && package_install "networkmanager-dispatcher-ntpd"
	# Network Management daemon
	system_ctl enable NetworkManager
#pause_function

## Icons
	print_title ""
	print_info ""
	package_install "faenza-icon-theme faience-icon-theme"
#	aur_package_install "gnome-colors-icon-theme"
#	aur_package_install "awoken-icons elementary-xfce-icons"
#	aur_package_install "elementary-xfce-icons"
#	aur_package_install "faenza-cupertino-icon-theme"
#	aur_package_install "inx-icon-theme"
#	aur_package_install "matrilineare-icon-theme"
#	aur_package_install "moka-icon-theme-git"
#	aur_package_install "nitrux-icon-theme"
#pause_function

## Themes
	print_title ""
	print_info ""
#	aur_package_install "xfce-theme-greybird-git"
#	aur_package_install "gtk-theme-numix-git"
#	aur_package_install "gtk-theme-orion-git"
#pause_function

## Cursors
	print_title ""
	print_info ""
	package_install "xcursor-vanilla-dmz"
#pause_function

## System Tools
	package_install "grsync"
	package_install "htop"
#pause_function

## Accessories
	print_title ""
	print_info ""
	package_install "cairo-dock cairo-dock-plugins catfish gnome-calculator scrot"
#	aur-package_install "screenfetch"
#pause_function

## Development Apps
	print_title ""
	print_info ""
	package_install "bluefish"
#pause_function

## Office Apps
	print_title "LIBREOFFICE - https://wiki.archlinux.org/index.php/LibreOffice"
	package_install "libreoffice-$LOCALE_LO libreoffice-common libreoffice-base libreoffice-calc libreoffice-draw libreoffice-impress libreoffice-math libreoffice-writer"
	package_install "hunspell-$LOCALE_HS"
	package_install "aspell-$LOCALE_AS"
	package_install "libreoffice-gnome"
	package_install "evince"

## Graphic Apps
	print_title ""
	print_info ""
	package_install "gimp"
#	aur_package_install "gimphelp-scriptfu gimp-paint-studio gimpfx-foundry"
	package_install "inkscape python2-numpy python-lxml"
#	aur_package_install "sozi"
	package_install "scribus"
	package_install "shotwell"

## Internet Apps
	print_title ""
	print_info ""
	package_install "chromium flashplugin"
	package_install "filezilla"
#	aur_package_install "chromium-pepper-flash chromium-libpdf"
#	aur_package_install "btsync"
#	aur_package_install "dropbox thunar-dropbox"
	package_install "transmission-gtk"
	if [[ -f /home/${USER_NAME}/.config/transmission/settings.json ]]; then
	replace_line '"blocklist-enabled": false' '"blocklist-enabled": true' /home/${USER_NAME}/.config/transmission/settings.json
	replace_line "www\.example\.com\/blocklist" "list\.iblocklist\.com\/\?list=bt_level1&fileformat=p2p&archiveformat=gz" /home/${USER_NAME}/.config/transmission/settings.json
	fi
	package_install "liferea"
	package_install "pidgin"
	package_install "skype"
	package_install "irssi"

## Audio Apps
	print_title "Audio Apps - https://wiki.archlinux.org/index.php/List_of_Applications/Multimedia"
	print_info "Installation of audio CODECS and an audio player"
	package_install "rhythmbox grilo grilo-plugins libgpod libdmapsharing gnome-python python-mako pywebkitgtk"
	package_install "gst-plugins-base gst-plugins-base-libs gst-plugins-good \
                           gst-plugins-bad gst-plugins-ugly gst-libav"
	package_install "gstreamer0.10 gstreamer0.10-plugins"
	package_install "vorbis-tools asunder"
	    # Use the 'standard' preset by default. This preset should generally be
            # transparent to most people on most music and is already quite high in quality.
            # The resulting bitrate should be in the 170-210kbps range, according to music
            # complexity.
#pause_function
	print_title "Set MP3 Defaults"
	print_info ""
#	sudo -u ${USER_NAME} gconftool-2 --type string --set /system/gstreamer/0.10/audio/profiles/mp3/pipeline "audio/x-raw-int,rate=44100,channels=2 ! lame name=enc preset=1001 ! id3v2mux"
#pause_function

## Video Apps
	print_title ""
	print_info ""
	package_install "vlc"
	package_install "libbluray libquicktime libdvdread libdvdnav libdvdcss cdrdao"
#	aur_package_install "libaacs"
         sudo -u ${USER_NAME} mkdir -p /home/${USER_NAME}/.config/aacs/ &&
            cd /home/${USER_NAME}/.config/aacs/ &&
            wget http://vlc-bluray.whoknowsmy.name/files/KEYDB.cfg
#pause_function

## Games
	print_title ""
	print_info ""
	package_install "frozen-bubble supertuxkart"
#pause_function

## Fonts
	print_title ""
	print_info ""
	package_install "ttf-dejavu ttf-dejavu ttf-liberation"
#	aur_package_install "ttf-funfonts"
#	package_remove ttf-droid
#	package_remove ttf-roboto
#	package_remove cantarell-fonts
#	package_remove ttf-ubuntu-font-family
#	aur_package_install "ttf-google-fonts-git"
#	aur_package_install "ttf-ms-fonts"
#pause_function

	sudo -u ${USER_NAME} gconftool-2 --type string --set /system/gstreamer/0.10/audio/profiles/mp3/pipeline "audio/x-raw-int,rate=44100,channels=2 ! lame name=enc preset=1001 ! id3v2mux"
#pause_function


	install_git_tor

	clean_orphan_packages

##Copy wallpapers to backgrounds directory
	cp ./images/* /usr/sahre/backgrounds/xfce/

	finish

#while true
#do
#  print_title "ARCHLINUX ULTIMATE INSTALL - https://github.com/helmuthdu/aui"
  
#  echo ""
#  echo " q) Quit"
#  echo ""
#  MAINMENU+=" q"
#  read_input_options "$MAINMENU"
#  for OPT in ${OPTIONS[@]}; do
#    case "$OPT" in
#       "q")
#        finish
#        ;;
#      *)
#        invalid_option
#        ;;
#    esac
#  done
#done
#}}}
